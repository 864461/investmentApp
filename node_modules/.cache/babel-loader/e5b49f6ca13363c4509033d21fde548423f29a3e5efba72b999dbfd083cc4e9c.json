{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mugab\\\\Documents\\\\investment calculator\\\\src\\\\App.js\";\nimport logo from './assets/investment-calculator-logo.png';\nimport Header from \"./Components/HeaderComponent\";\nimport Form from \"./Components/CalculatorForm\";\nimport ResultTable from \"./Components/ResultTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n    let currentSavings = +userInput[userInput.currentSaving]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[userInput.yearlySaving]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[userInput.expectedInterest] / 100;\n    const duration = +userInput[userInput.investmentDuration];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    console.log(yearlyData);\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Header","Form","ResultTable","jsxDEV","_jsxDEV","App","calculateHandler","userInput","yearlyData","currentSavings","currentSaving","yearlyContribution","yearlySaving","expectedReturn","expectedInterest","duration","investmentDuration","i","yearlyInterest","push","year","savingsEndOfYear","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/mugab/Documents/investment calculator/src/App.js"],"sourcesContent":["import logo from './assets/investment-calculator-logo.png';\nimport Header from \"./Components/HeaderComponent\";\nimport Form from \"./Components/CalculatorForm\";\nimport ResultTable from \"./Components/ResultTable\";\nfunction App() {\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n    let currentSavings = +userInput[userInput.currentSaving]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[userInput.yearlySaving]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[userInput.expectedInterest] / 100;\n    const duration = +userInput[userInput.investmentDuration];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    console.log(yearlyData)\n    // do something with yearlyData ...\n  };\n\n\n\n\n  return (\n    <div>\n      <Header/>\n      <Form onSubmit={calculateHandler}/>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      <ResultTable/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,yCAAyC;AAC1D,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;IACvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAACA,SAAS,CAACG,aAAa,CAAC,CAAC,CAAC;IAC1D,MAAMC,kBAAkB,GAAG,CAACJ,SAAS,CAACA,SAAS,CAACK,YAAY,CAAC,CAAC,CAAC;IAC/D,MAAMC,cAAc,GAAG,CAACN,SAAS,CAACA,SAAS,CAACO,gBAAgB,CAAC,GAAG,GAAG;IACnE,MAAMC,QAAQ,GAAG,CAACR,SAAS,CAACA,SAAS,CAACS,kBAAkB,CAAC;;IAEzD;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGT,cAAc,GAAGI,cAAc;MACtDJ,cAAc,IAAIS,cAAc,GAAGP,kBAAkB;MACrDH,UAAU,CAACW,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEZ,cAAc;QAChCE,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IAEAW,OAAO,CAACC,GAAG,CAACf,UAAU,CAAC;IACvB;EACF,CAAC;;EAKD,oBACEJ,OAAA;IAAAoB,QAAA,gBACEpB,OAAA,CAACJ,MAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTxB,OAAA,CAACH,IAAI;MAAC4B,QAAQ,EAAEvB;IAAiB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAGnCxB,OAAA,CAACF,WAAW;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV;AAACE,EAAA,GAxCQzB,GAAG;AA0CZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}